#include "SpringSim.h"

SpringSim::SpringSim(const std::string& name, SpringMass* target) :
	BaseSimulator(name),
	mySystem(target)
{
}	// SpringSim

SpringSim::~SpringSim()
{
}	// SpringSim::~SpringSim

Vector* SpringSim::eulerSolveF(int index, vector<Vector*> particles, vector<Vector*> velocities, vector<int> connections, vector<double*> springParams, double mass)
{
	// Perform euler integration to determine F total
	Vector FTotal = { 0.0, 0.0, 0.0 };
	Vector p1 = { *particles[index][0], *particles[index][1], *particles[index][2] };
	Vector v1 = { *velocities[index][0], *velocities[index][1], *velocities[index][2] };
	
	for (int j = 0; j < connections.size(); j++)
	{
		// Identify a connected particle to compare position and velocity with.
		int p2Index = connections[j];
		Vector p2 = { *particles[p2Index][0], *particles[p2Index][1], *particles[p2Index][2] };
		Vector v2 = { *velocities[p2Index][0], *velocities[p2Index][1], *velocities[p2Index][2] };

		// Calculate Spring Force
		double ks = springParams[j][0];
		double restlength = springParams[j][2];
		double dxLength = sqrt(pow(p2[0] - p1[0], 2) + pow(p2[1] - p1[1], 2) + pow(p2[2] - p1[2], 2));
		Vector dxNormalized = { (p2[0] - p1[0])/dxLength , (p2[1] - p1[1])/dxLength, (p2[2] - p1[2])/dxLength };
		double restMinusDxLength = restlength - dxLength;
		double coefficient = ks * restMinusDxLength;
		Vector Fsp = { coefficient * dxNormalized[0], coefficient * dxNormalized[1], coefficient * dxNormalized[2] };
		
		// Calculate Damping Force
		double kd = -(springParams[j][1]);
		Vector dv = { v2[0] - v1[0], v2[1] - v1[1], v2[2] - v1[2] };
		double dvDotDxNorm = dv[0] * dxNormalized[0] + dv[1] * dxNormalized[1] + dv[2] * dxNormalized[2];
		double coefficient2 = kd * dvDotDxNorm;
		Vector Fd = { coefficient2 * dxNormalized[0], coefficient2 * dxNormalized[1], coefficient2 * dxNormalized[2] }; // negative of kd is already applied

		// Sum forces
		FTotal[0] = FTotal[0] + Fsp[0] + Fd[0];
		FTotal[1] = FTotal[1] + Fsp[1] + Fd[1];
		FTotal[2] = FTotal[2] + Fsp[2] + Fd[2];
	}

	// Environmental forces, drag and gravity
	FTotal[0] = FTotal[0] - drag * v1[0];
	FTotal[1] = FTotal[1] - drag * v1[1] + mass * gravity;
	FTotal[2] = FTotal[2] - drag * v1[2];

	return &FTotal;
}

int SpringSim::step(double time)
{
	// Determine which integration method to use to determine new velocity and new position based on set time step
	// retrive data from system
	vector<Vector*> newP;
	vector<Vector*> newV;
	vector<Vector*> p = mySystem->getParticles();
	vector<Vector*> v = mySystem->getVelocities();
	vector<Vector*> prevP = mySystem->getPrevParticles();

	vector<vector<int>> connections = mySystem->getConnections();
	vector<vector<double*>> springParams = mySystem->getSpringParams();

	vector<double> masses = mySystem->getMasses();
	bool* nailed = mySystem->getNailed();
	// end retrive data

	// initialize constants
	Vector groundP = { 0.0, -5.0, 0.0 }; // initialized in system
	Vector groundN = { 0.0, 1.0, 0.0 };

	for (int i = 0; i < p.size(); i++)
	{
		bool isNailed = nailed[i];
		if (!isNailed)
		{
			// Determine integration method
			if (strcmp(integration, "euler") == 0)
			{
				// Save current position and velocity of the particle
				Vector currParticle = { *p[i][0], *p[i][1], *p[i][2] };
				Vector currVelocity = { *v[i][0], *v[i][1], *v[i][2] };

				// Solve for the total Force acting on the particle
				Vector* FTotal = { eulerSolveF(i, p, v, connections[i], springParams[i], masses[i]) };

				// Solve for new velocity after force applied
				Vector newVelocity = { *v[i][0], *v[i][1], *v[i][2] };
				newVelocity[0] = newVelocity[0] + time * *FTotal[0] / masses[i];
				newVelocity[1] = newVelocity[1] + time * *FTotal[1] / masses[i];
				newVelocity[2] = newVelocity[2] + time * *FTotal[2] / masses[i];

				//animTcl::OutputMessage("NewVelocity: x, y, z: %f, %f, %f", newVelocity[0], newVelocity[1], newVelocity[2]);

				// Collision detection with ground plane
				if (currParticle[1] + newVelocity[1] * time <= groundP[1])
				{
					// Collision with plane, solve for Fnormal
					Vector dx = { currParticle[0], currParticle[1] - groundP[1], currParticle[2] };
					double dxDotN = dx[1] * groundN[1]; // N is the normal of ground plane, only contributes in the y direction
					// Define new vector for -ks(dxDotN * N), where N = groundN = {0.0, 1.0, 0.0}, ks=groundKs
					Vector term1 = { 0.0, -groundKs * dxDotN, 0.0 };

					double vDotN = newVelocity[1] * groundN[1]; // N only contributes in the y direction
					// Define new vector for kd(vDotN * N), kd=groundKd
					Vector term2 = { 0.0, groundKd * vDotN, 0.0 };
					// Finally, solve Fnormal
					double Fn = term1[1] - term2[1]; // x and z terms come out to 0.0, thus a single float is sufficient.

					*FTotal[1] = *FTotal[1] + Fn;
					// Solve and update velocity 
					currVelocity[0] = time * *FTotal[0] / masses[i];
					currVelocity[1] = time * *FTotal[1] / masses[i];
					currVelocity[2] = time * *FTotal[2] / masses[i];

					// Solve and update position of particle
					currParticle[0] = currParticle[0] + currVelocity[0] * time;
					currParticle[1] = currParticle[1] + currVelocity[1] * time;
					currParticle[2] = currParticle[2] + currVelocity[2] * time;

					// Check to make sure particle is not still below the ground
					if (currParticle[1] < groundP[1])
					{
						currParticle[1] = groundP[1];
					}
					// Append new variable to list
					newP.push_back(&currParticle); // error
					newV.push_back(&currVelocity);

				}
				else
				{
					// No collision
					currParticle[0] = currParticle[0] + newVelocity[0] * time;
					currParticle[1] = currParticle[1] + newVelocity[1] * time;
					currParticle[2] = currParticle[2] + newVelocity[2] * time;
					// Append new variable to list
					newP.push_back(&currParticle);
					newV.push_back(&newVelocity);
				}
				
			}
			else if (strcmp(integration, "sympletic") == 0)
			{

			}
			else // verlet can be inferred.
			{

			}
		}
		else
		{
			Vector particle = { *p[i][0], *p[i][1], *p[i][2] };
			Vector velocity = { *v[i][0], *v[i][1], *v[i][2] };
			newP.push_back(&particle);
			newV.push_back(&velocity);
		}
	}

	mySystem->setState(newP);
	mySystem->setVel(newV);
	return 0;

}	// SpringSim::step

int SpringSim::command(int argc, myCONST_SPEC char** argv)
{
	if (argc < 1)
	{
		animTcl::OutputMessage("simulator %s: wrong number of params.", m_name.c_str());
		return TCL_ERROR;
	}
	else if (strcmp(argv[0], "link") == 0)
	{
		if (argc == 3)
		{

		}
		else
		{
			animTcl::OutputMessage("simulator %s: wrong number of params for command 'link'.", m_name.c_str());
			return TCL_ERROR;
		}
	}
	else if (strcmp(argv[0], "spring") == 0)
	{
		if (argc == 6)
		{
			int index1 = std::stoi(argv[1]);
			int index2 = std::stoi(argv[2]);
			double ks = std::stod(argv[3]);;
			double kd = std::stod(argv[4]);;
			double restlength = std::stod(argv[5]);;

			mySystem->spring(index1, index2, ks, kd, restlength);
		}
		else
		{
			animTcl::OutputMessage("simulator %s: wrong number of params for command 'spring'.", m_name.c_str());
			return TCL_ERROR;
		}
	}
	else if (strcmp(argv[0], "fix") == 0)
	{
		if (argc == 2)
		{
			int index = std::stoi(argv[1]);
			mySystem->nailParticle(index);
		}
		else
		{
			animTcl::OutputMessage("simulator %s: wrong number of params for command 'fix'.", m_name.c_str());
			return TCL_ERROR;
		}
	}
	else if (strcmp(argv[0], "integration") == 0)
	{
		if (argc == 3)
		{
			strcpy(integration, argv[1]);
			time = std::stod(argv[2]);
		}
		else
		{
			animTcl::OutputMessage("simulator %s: wrong number of params for command 'integration'.", m_name.c_str());
			return TCL_ERROR;
		}
	}
	else if (strcmp(argv[0], "ground") == 0)
	{
		if (argc == 3)
		{
			groundKs = std::stod(argv[1]);
			groundKd = std::stod(argv[2]);
		}
		else
		{
			animTcl::OutputMessage("simulator %s: wrong number of params for command 'ground'.", m_name.c_str());
			return TCL_ERROR;
		}
	}
	else if (strcmp(argv[0], "gravity") == 0)
	{
		if (argc == 2)
		{
			gravity = std::stod(argv[1]);
		}
		else
		{
			animTcl::OutputMessage("simulator %s: wrong number of params for command 'gravity'.", m_name.c_str());
			return TCL_ERROR;
		}
	}
	else if (strcmp(argv[0], "drag") == 0)
	{
		if (argc == 2)
		{
			drag = std::stod(argv[1]);
		}
		else
		{
			animTcl::OutputMessage("simulator %s: wrong number of params for command 'drag'.", m_name.c_str());
			return TCL_ERROR;
		}
	}

	glutPostRedisplay();
	return TCL_OK;
} // SpringSim::command
